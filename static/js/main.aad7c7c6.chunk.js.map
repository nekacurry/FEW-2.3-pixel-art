{"version":3,"sources":["actions/index.js","components/Grid.js","components/ColorPicker.js","components/Buttons.js","App.js","reportWebVitals.js","reducers/gridReducer.js","reducers/colorReducer.js","reducers/index.js","index.js"],"names":["SET_COLOR","PICK_COLOR","FILL_COLOR","RESET","Grid","arr","useSelector","state","grid","selectedColor","color","dispatch","useDispatch","className","map","i","style","backgroundColor","onClick","index","type","payload","setColor","ColorPicker","useState","value","onChange","e","target","pickColor","Buttons","fillColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultGrid","push","gridReducer","action","colorReducer","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAaA,EAAY,YACZC,EAAa,aACbC,EAAa,aACbC,EAAQ,Q,OCgBNC,MAff,WACE,IAAMC,EAAMC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QACjCC,EAAgBH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,SAC3CC,EAAWC,cAEjB,OACE,qBAAKC,UAAU,OAAf,SACGR,EAAIS,KAAI,SAACJ,EAAOK,GAAR,OAAc,qBACrBC,MAAQ,CAAEC,gBAAiBP,GAC3BQ,QAAS,kBAAMP,EDDC,SAACD,EAAOS,GAC9B,MAAO,CACLC,KAAMpB,EACNqB,QAAS,CAACX,QAAOS,UCFWG,CAASb,EAAeM,a,OCUzCQ,MAnBf,WAAwB,IAAD,EAEKC,mBAAS,OAFd,mBAEdd,EAFc,KAEPY,EAFO,KAGfX,EAAWC,cAEjB,OACE,qBAAKC,UAAW,SAAhB,SACE,uBACEO,KAAK,QACLK,MAAOf,EACPgB,SAAW,SAAAC,GACTL,EAAUK,EAAEC,OAAOH,OACnBd,EFGe,SAACD,GACxB,MAAO,CACLU,KAAMnB,EACNoB,QAAS,CAAEX,UENImB,CAAUF,EAAEC,OAAOH,cCKvBK,MAlBf,WAAoB,IACVpB,EAAUJ,aAAY,SAAAC,GAAK,OAAIA,KAA/BG,MACFC,EAAWC,cAEjB,OACE,sBAAKC,UAAW,UAAhB,UACE,wBACEA,UAAW,cACXK,QAAS,kBAAMP,EHNE,SAACD,GACxB,MAAO,CACLU,KAAMlB,EACNmB,QAAS,CAAEX,UGGiBqB,CAAUrB,KAFpC,kBAKA,wBAAQG,UAAU,eAAeK,QAAS,SAACS,GACzChB,EHYC,CAAES,KAAMjB,KGbX,uBCIS6B,MAbf,WACE,OACE,sBAAKnB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACI,oBAAIA,UAAU,YAAd,4BAEL,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCDUoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCLRQ,EAAc,WAElB,IADA,IAAMrC,EAAM,GACHU,EAAI,EAAGA,EAAI,IAAKA,GAAK,EAC5BV,EAAIsC,KAAK,WAEX,OAAOtC,GAyBMuC,EAtBK,WAAoC,IAAnCrC,EAAkC,uDAA1BmC,IAAeG,EAAW,uCACrD,OAAOA,EAAOzB,MACZ,KAAKpB,EACH,OAAOO,EAAMO,KAAI,SAACJ,EAAOK,GACvB,OAAI8B,EAAOxB,QAAQF,QAAUJ,EACpB8B,EAAOxB,QAAQX,MAEjBA,KAGX,KAAKR,EACH,OAAOK,EAAMO,KAAI,kBAAM+B,EAAOxB,QAAQX,SAExC,KAAKP,EACH,OAAOuC,IAET,QACE,OAAOnC,ICfEuC,EAVM,WAA4B,IAA3BvC,EAA0B,uDAAlB,MAAOsC,EAAW,uCAC9C,OAAOA,EAAOzB,MACZ,KAAKnB,EACH,OAAO4C,EAAOxB,QAAQX,MAExB,QACE,OAAOH,ICCEwC,EALKC,YAAgB,CAClCxC,KAAMoC,EACNlC,MAAOoC,ICIHG,EAAQC,YAAYH,GAE1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.aad7c7c6.chunk.js","sourcesContent":["export const SET_COLOR = 'SET_COLOR'\nexport const PICK_COLOR = 'PICK_COLOR'\nexport const FILL_COLOR = 'FILL_COLOR'\nexport const RESET = 'RESET'\n\nexport const fillColor = (color) => {\n  return {\n    type: FILL_COLOR,\n    payload: { color }\n  }\n}\n\nexport const setColor = (color, index) => {\n  return {\n    type: SET_COLOR,\n    payload: {color, index}\n  }\n}\n\nexport const pickColor = (color) => {\n  return {\n    type: PICK_COLOR,\n    payload: { color }\n  }\n}\n\nexport const reset = () => {\n  return { type: RESET }\n}","import { useSelector, useDispatch } from 'react-redux';\nimport { setColor } from '../actions/index'\n\n\nfunction Grid() {\n  const arr = useSelector(state => state.grid)\n  const selectedColor = useSelector(state => state.color)\n  const dispatch = useDispatch()\n\n  return (\n    <div className='Grid'>\n      {arr.map((color, i) => <div \n        style ={{ backgroundColor: color}} \n        onClick={() => dispatch(setColor(selectedColor, i))}\n      />)}\n    </div>\n  )\n}\n\nexport default Grid ","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { pickColor } from '../actions/index'\n\nfunction ColorPicker() {\n\n  const [color, setColor] = useState('red')\n  const dispatch = useDispatch()\n\n  return (\n    <div className={'picker'}>\n      <input \n        type=\"color\"\n        value={color}\n        onChange={ e => { \n          setColor( e.target.value )\n          dispatch(pickColor(e.target.value))\n        }}\n      />\n    </div>\n  )\n}\n\nexport default ColorPicker","import { useSelector, useDispatch } from 'react-redux';\nimport { fillColor, reset } from '../actions/index'\n\nfunction Buttons() {\n  const { color } = useSelector(state => state)\n  const dispatch = useDispatch()\n\n  return (\n    <div className={'buttons'}>\n      <button\n        className={'fill-button'}\n        onClick={() => dispatch(fillColor(color))}\n      >Fill</button>\n\n      <button className=\"reset-button\" onClick={(e) => {\n        dispatch(reset())\n      }}>Reset</button>\n    </div>\n  )\n}\n\nexport default Buttons","import './App.css';\nimport Grid from './components/Grid'\nimport ColorPicker from './components/ColorPicker';\nimport Buttons from './components/Buttons';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <h1 className=\"App-title\">Pixely Redux</h1>\n      </header>\n     <Grid />\n     <ColorPicker />\n     <Buttons />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SET_COLOR, FILL_COLOR, RESET } from '../actions';\n\nconst defaultGrid = () => {\n  const arr = []\n  for (let i = 0; i < 100; i += 1 ) {\n    arr.push('#f7f7f7')\n  }\n  return arr\n}\n\nconst gridReducer = (state = defaultGrid(), action) => {\n  switch(action.type) {\n    case SET_COLOR:\n      return state.map((color, i) => {\n        if (action.payload.index === i){\n          return action.payload.color\n        }\n        return color\n      })\n      \n    case FILL_COLOR:\n      return state.map(() => action.payload.color)\n\n    case RESET:\n      return defaultGrid()\n\n    default:\n      return state\n\n  }\n}\n\nexport default gridReducer","import { PICK_COLOR } from '../actions'\n\nconst colorReducer = (state = 'red', action) => {\n  switch(action.type) {\n    case PICK_COLOR:\n      return action.payload.color\n      \n    default:\n      return state\n  }\n}\n\nexport default colorReducer","import { combineReducers } from \"redux\";\nimport gridReducer from \"./gridReducer\";\nimport colorReducer from \"./colorReducer\";\n\nconst rootReducer = combineReducers({\n  grid: gridReducer,\n  color: colorReducer\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}